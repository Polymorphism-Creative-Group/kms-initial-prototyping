package io.xtrea.ontology;

import io.xtrea.ontology.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 Source Class: IlyaBotFactory<br>
 * @version generated on Sun Apr 08 06:35:31 GMT+08:00 2018 by Jonathan
 */
public class IlyaBotFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public IlyaBotFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public IlyaBotFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#Article
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#Article", Article.class, DefaultArticle.class);
    }

    /**
     * Creates an instance of type Article.  Modifies the underlying ontology.
     */
    public Article createArticle(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTICLE, DefaultArticle.class);
    }

    /**
     * Gets an instance of type Article with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Article getArticle(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTICLE, DefaultArticle.class);
    }

    /**
     * Gets all instances of Article from the ontology.
     */
    public Collection<? extends Article> getAllArticleInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTICLE, DefaultArticle.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#GameMechanism
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#GameMechanism", GameMechanism.class, DefaultGameMechanism.class);
    }

    /**
     * Creates an instance of type GameMechanism.  Modifies the underlying ontology.
     */
    public GameMechanism createGameMechanism(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GAMEMECHANISM, DefaultGameMechanism.class);
    }

    /**
     * Gets an instance of type GameMechanism with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public GameMechanism getGameMechanism(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GAMEMECHANISM, DefaultGameMechanism.class);
    }

    /**
     * Gets all instances of GameMechanism from the ontology.
     */
    public Collection<? extends GameMechanism> getAllGameMechanismInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GAMEMECHANISM, DefaultGameMechanism.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#IlyaBot
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#IlyaBot", IlyaBot.class, DefaultIlyaBot.class);
    }

    /**
     * Creates an instance of type IlyaBot.  Modifies the underlying ontology.
     */
    public IlyaBot createIlyaBot(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ILYABOT, DefaultIlyaBot.class);
    }

    /**
     * Gets an instance of type IlyaBot with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IlyaBot getIlyaBot(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ILYABOT, DefaultIlyaBot.class);
    }

    /**
     * Gets all instances of IlyaBot from the ontology.
     */
    public Collection<? extends IlyaBot> getAllIlyaBotInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ILYABOT, DefaultIlyaBot.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#NodeLinker
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#NodeLinker", NodeLinker.class, DefaultNodeLinker.class);
    }

    /**
     * Creates an instance of type NodeLinker.  Modifies the underlying ontology.
     */
    public NodeLinker createNodeLinker(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NODELINKER, DefaultNodeLinker.class);
    }

    /**
     * Gets an instance of type NodeLinker with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NodeLinker getNodeLinker(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NODELINKER, DefaultNodeLinker.class);
    }

    /**
     * Gets all instances of NodeLinker from the ontology.
     */
    public Collection<? extends NodeLinker> getAllNodeLinkerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NODELINKER, DefaultNodeLinker.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#NodeLinker_Quit
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#NodeLinker_Quit", NodeLinker_Quit.class, DefaultNodeLinker_Quit.class);
    }

    /**
     * Creates an instance of type NodeLinker_Quit.  Modifies the underlying ontology.
     */
    public NodeLinker_Quit createNodeLinker_Quit(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NODELINKER_QUIT, DefaultNodeLinker_Quit.class);
    }

    /**
     * Gets an instance of type NodeLinker_Quit with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NodeLinker_Quit getNodeLinker_Quit(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NODELINKER_QUIT, DefaultNodeLinker_Quit.class);
    }

    /**
     * Gets all instances of NodeLinker_Quit from the ontology.
     */
    public Collection<? extends NodeLinker_Quit> getAllNodeLinker_QuitInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NODELINKER_QUIT, DefaultNodeLinker_Quit.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#NodeLinker_Random
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#NodeLinker_Random", NodeLinker_Random.class, DefaultNodeLinker_Random.class);
    }

    /**
     * Creates an instance of type NodeLinker_Random.  Modifies the underlying ontology.
     */
    public NodeLinker_Random createNodeLinker_Random(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NODELINKER_RANDOM, DefaultNodeLinker_Random.class);
    }

    /**
     * Gets an instance of type NodeLinker_Random with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NodeLinker_Random getNodeLinker_Random(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NODELINKER_RANDOM, DefaultNodeLinker_Random.class);
    }

    /**
     * Gets all instances of NodeLinker_Random from the ontology.
     */
    public Collection<? extends NodeLinker_Random> getAllNodeLinker_RandomInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NODELINKER_RANDOM, DefaultNodeLinker_Random.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#Node_SelectReaction
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#Node_SelectReaction", Node_SelectReaction.class, DefaultNode_SelectReaction.class);
    }

    /**
     * Creates an instance of type Node_SelectReaction.  Modifies the underlying ontology.
     */
    public Node_SelectReaction createNode_SelectReaction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NODE_SELECTREACTION, DefaultNode_SelectReaction.class);
    }

    /**
     * Gets an instance of type Node_SelectReaction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Node_SelectReaction getNode_SelectReaction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NODE_SELECTREACTION, DefaultNode_SelectReaction.class);
    }

    /**
     * Gets all instances of Node_SelectReaction from the ontology.
     */
    public Collection<? extends Node_SelectReaction> getAllNode_SelectReactionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NODE_SELECTREACTION, DefaultNode_SelectReaction.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#Node_Successive
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#Node_Successive", Node_Successive.class, DefaultNode_Successive.class);
    }

    /**
     * Creates an instance of type Node_Successive.  Modifies the underlying ontology.
     */
    public Node_Successive createNode_Successive(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NODE_SUCCESSIVE, DefaultNode_Successive.class);
    }

    /**
     * Gets an instance of type Node_Successive with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Node_Successive getNode_Successive(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NODE_SUCCESSIVE, DefaultNode_Successive.class);
    }

    /**
     * Gets all instances of Node_Successive from the ontology.
     */
    public Collection<? extends Node_Successive> getAllNode_SuccessiveInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NODE_SUCCESSIVE, DefaultNode_Successive.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#Node_Terminal
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#Node_Terminal", Node_Terminal.class, DefaultNode_Terminal.class);
    }

    /**
     * Creates an instance of type Node_Terminal.  Modifies the underlying ontology.
     */
    public Node_Terminal createNode_Terminal(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NODE_TERMINAL, DefaultNode_Terminal.class);
    }

    /**
     * Gets an instance of type Node_Terminal with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Node_Terminal getNode_Terminal(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NODE_TERMINAL, DefaultNode_Terminal.class);
    }

    /**
     * Gets all instances of Node_Terminal from the ontology.
     */
    public Collection<? extends Node_Terminal> getAllNode_TerminalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NODE_TERMINAL, DefaultNode_Terminal.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#Node_TheEnd
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#Node_TheEnd", Node_TheEnd.class, DefaultNode_TheEnd.class);
    }

    /**
     * Creates an instance of type Node_TheEnd.  Modifies the underlying ontology.
     */
    public Node_TheEnd createNode_TheEnd(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NODE_THEEND, DefaultNode_TheEnd.class);
    }

    /**
     * Gets an instance of type Node_TheEnd with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Node_TheEnd getNode_TheEnd(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NODE_THEEND, DefaultNode_TheEnd.class);
    }

    /**
     * Gets all instances of Node_TheEnd from the ontology.
     */
    public Collection<? extends Node_TheEnd> getAllNode_TheEndInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NODE_THEEND, DefaultNode_TheEnd.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#Reaction
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#Reaction", Reaction.class, DefaultReaction.class);
    }

    /**
     * Creates an instance of type Reaction.  Modifies the underlying ontology.
     */
    public Reaction createReaction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_REACTION, DefaultReaction.class);
    }

    /**
     * Gets an instance of type Reaction with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Reaction getReaction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_REACTION, DefaultReaction.class);
    }

    /**
     * Gets all instances of Reaction from the ontology.
     */
    public Collection<? extends Reaction> getAllReactionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_REACTION, DefaultReaction.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#Resource
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#Resource", Resource.class, DefaultResource.class);
    }

    /**
     * Creates an instance of type Resource.  Modifies the underlying ontology.
     */
    public Resource createResource(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RESOURCE, DefaultResource.class);
    }

    /**
     * Gets an instance of type Resource with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Resource getResource(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RESOURCE, DefaultResource.class);
    }

    /**
     * Gets all instances of Resource from the ontology.
     */
    public Collection<? extends Resource> getAllResourceInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RESOURCE, DefaultResource.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#Scenario
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#Scenario", Scenario.class, DefaultScenario.class);
    }

    /**
     * Creates an instance of type Scenario.  Modifies the underlying ontology.
     */
    public Scenario createScenario(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCENARIO, DefaultScenario.class);
    }

    /**
     * Gets an instance of type Scenario with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Scenario getScenario(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCENARIO, DefaultScenario.class);
    }

    /**
     * Gets all instances of Scenario from the ontology.
     */
    public Collection<? extends Scenario> getAllScenarioInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCENARIO, DefaultScenario.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#ScenicNode
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#ScenicNode", ScenicNode.class, DefaultScenicNode.class);
    }

    /**
     * Creates an instance of type ScenicNode.  Modifies the underlying ontology.
     */
    public ScenicNode createScenicNode(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCENICNODE, DefaultScenicNode.class);
    }

    /**
     * Gets an instance of type ScenicNode with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScenicNode getScenicNode(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCENICNODE, DefaultScenicNode.class);
    }

    /**
     * Gets all instances of ScenicNode from the ontology.
     */
    public Collection<? extends ScenicNode> getAllScenicNodeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCENICNODE, DefaultScenicNode.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#ScenicNodeComponent
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#ScenicNodeComponent", ScenicNodeComponent.class, DefaultScenicNodeComponent.class);
    }

    /**
     * Creates an instance of type ScenicNodeComponent.  Modifies the underlying ontology.
     */
    public ScenicNodeComponent createScenicNodeComponent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCENICNODECOMPONENT, DefaultScenicNodeComponent.class);
    }

    /**
     * Gets an instance of type ScenicNodeComponent with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScenicNodeComponent getScenicNodeComponent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCENICNODECOMPONENT, DefaultScenicNodeComponent.class);
    }

    /**
     * Gets all instances of ScenicNodeComponent from the ontology.
     */
    public Collection<? extends ScenicNodeComponent> getAllScenicNodeComponentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCENICNODECOMPONENT, DefaultScenicNodeComponent.class);
    }


    /* ***************************************************
     * Class http://xtrea.io/ontology/2018/4/ilyabot#ScenicScript
     */

    {
        javaMapping.add("http://xtrea.io/ontology/2018/4/ilyabot#ScenicScript", ScenicScript.class, DefaultScenicScript.class);
    }

    /**
     * Creates an instance of type ScenicScript.  Modifies the underlying ontology.
     */
    public ScenicScript createScenicScript(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCENICSCRIPT, DefaultScenicScript.class);
    }

    /**
     * Gets an instance of type ScenicScript with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScenicScript getScenicScript(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCENICSCRIPT, DefaultScenicScript.class);
    }

    /**
     * Gets all instances of ScenicScript from the ontology.
     */
    public Collection<? extends ScenicScript> getAllScenicScriptInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCENICSCRIPT, DefaultScenicScript.class);
    }


}
